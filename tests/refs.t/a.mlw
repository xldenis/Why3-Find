(**
  Infix reference: {int.Int.(+)}

  Prefix reference: {int.Int.(-_)}

  Value reference: {v:int.MinMax.max}

  Logic reference: {l:int.MinMax.max}

  Local references {A.t}, {binop}
  *)

theory A
  type t
  function op t t : t
end

module B
  type t
  val binop t t : t
  (** B reference {t} *)
  (** A reference {A.op} *)
end

module C
  use int.Int
  type t
  function value t : int
  predicate (<<) (x y : t) = value x < value y
  predicate (!=) (x y : t) = x << y \/ y << x
end
