(** Before A *)

(** Introducing A *)
module A

  type t = A | B

  (** Testing match-with *)
  let swap (e : t) : t =
    match e with
    | A -> B
    | B -> A
    end

end

(** Before B *)

(** Introducing B *)
module B

  exception Error

  val wrong () : unit
    raises { Error }

  (** Testing try-with *)
  let test () : unit =
    try wrong () with Error -> () end

end

(** After B *)
