# --------------------------------------------------------------------------
# ---  WHY3 Makefile
# --------------------------------------------------------------------------

#WHY3_PACKAGE= name
#WHY3_DEPENDS= pkg …
#WHY3_OPTIONS= OPTIONS…
#WHY3_HAMMERS= OPTIONS…
#WHY3_DRIVERS= *.drv …
#WHY3_CONFIGS= *.cfg …
#WHY3_EXTRACT= m.M …
#WHY3_LIBRARIES= ocaml pkg …

# --------------------------------------------------------------------------

.PHONY: all

all: build

# --------------------------------------------------------------------------
# ---  Targets
# --------------------------------------------------------------------------

WHY3_TARGETS=$(shell find $(WHY3_PACKAGE) -name "*.mlw")

.PHONY: compile check replay fix

compile: $(patsubst %.mlw,%.cc,$(WHY3_TARGETS))

replay: $(patsubst %.mlw,%.replay,$(WHY3_TARGETS))
	@echo "-----------------------------"

check: $(patsubst %.mlw,%.check,$(WHY3_TARGETS))

prove: $(patsubst %.mlw,%.prove,$(WHY3_TARGETS))

fix: $(patsubst %.mlw,%.fix,$(WHY3_TARGETS))
	@echo "-----------------------------"

clean:: $(patsubst %.mlw,%.clean,$(WHY3_TARGETS))
	dune clean

# --------------------------------------------------------------------------
# ---  Patterns
# --------------------------------------------------------------------------

WHY3_OPTS=$(WHY3_OPTIONS) $(addprefix "--extra-config ",$(WHY3_CONFIGS))
WHY3_PKGS=$(addprefix "-p ",$(WHY3_DEPENDS))
WHY3_DRVS=$(addprefix "-D ",$(WHY3_DRIVERS))
WHY3_LIBS=$(shell why3find query -l $(WHY3_DEPENDS))
WHY3_CCP=why3find compile $(WHY3_OPTIONS) $(WHY3_PKGS)
WHY3_IDE=why3find ide $(WHY3_OPTIONS) $(WHY3_PKGS)
WHY3_REPLAY=why3find replay -f $(WHY3_OPTIONS) $(WHY3_PKGS)
WHY3_PROVE=why3find hammer $(WHY3_HAMMERS) $(WHY3_PKGS)

%.dir: %.mlw
	@mkdir -p $*

%.clean: %.mlw
	@rm -fr $*

%.cc: %.mlw
	@echo "why3find compile […] $<"
	@($(WHY3_CCP) $<)

%.chk: %.mlw
	@($(WHY3_CCP) $<)

%.ide: %.chk %.dir
	@echo "why3find ide $*.mlw, waiting…"
	@($(WHY3_IDE) $*.mlw)

%.prove: %.dir
	@echo "why3find hammer […] $*.mlw"
	@($(WHY3_PROVE) -q $*.mlw)

%.fix: %.dir
	@echo "-----------------------------"
	@echo "--- fixup $*"
	@echo "-----------------------------"
	@if ! $(WHY3_PROVE) $*.mlw; \
	 then echo "[Fix Required] why3 ide $*, waiting…"; \
	      $(WHY3_IDE) $*.mlw; \
	 fi

%.check: %.dir
	@echo "--- check $*"
	@$(WHY3_REPLAY) --obsolete-only $* > .log 2> /dev/null
	@if grep -q "\(failed\|not proved\)" .log ;\
	 then cat .log ; exit 1;\
	 fi

%.replay: %.dir
	@echo "-----------------------------"
	@echo "--- replay $*"
	@echo "-----------------------------"
	@$(WHY3_REPLAY) $* | tee .log
	@if grep -q "\(failed\|not proved\)" .log ; then exit 1; fi

# --------------------------------------------------------------------------
# ---  Extraction
# --------------------------------------------------------------------------

.PHONY: extract

ifneq ($(WHY3_EXTRACT),)
extract:
	@echo "why3find extract -o ./lib […]"
	@rm -f lib/*.ml
	@mkdir -p lib
	@why3find extract \
		--driver ocaml64 $(WHY3_DRVS) \
		--modular -o ./lib \
		$(WHY3_OPTIONS) $(WHY3_PKGS) $(WHY3_EXTRACT)
endif

# --------------------------------------------------------------------------
# ---  Build
# --------------------------------------------------------------------------

.PHONY: build

ifneq ($(WHY3_EXTRACT),)
build:lib/dune
lib/dune: Makefile
	@mkdir -p lib
	@rm -f $@
	@echo "; generated by why3find makefile" > $@
	@echo "(library" >> $@
	@echo "  (name foo)" >> $@
	@echo "  (public_name $(WHY3_PACKAGE))" >> $@
	@echo "  (wrapped false)" >> $@
	@echo "  (libraries $(WHY3_LIBRARIES) $(WHY3_LIBS)))" >> $@
	@chmod a-w $@
	@echo "install (dune)   lib/dune"
endif

build: dune META.json
dune META.json: Makefile
	@rm -f dune META.json
	@why3find install --local \
		$(WHY3_PACKAGE) $(WHY3_DEPENDS) \
		$(WHY3_TARGETS) $(WHY3_CONFIGS) $(WHY3_DRIVERS)
	@chmod a-w dune META.json


build:
	@dune build

# --------------------------------------------------------------------------
# ---  INSTALL
# --------------------------------------------------------------------------

.PHONY: install

install::
	@dune install

uninstall::
	@dune uninstall

# --------------------------------------------------------------------------
